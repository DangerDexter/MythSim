/* The following code was generated by JFlex 1.3.5 on 2/5/04 8:03 PM */

 /*
  * MythSim
  *
  * Copyright (C) 2002-2004 Jason Vroustouris <jasonv@jasonv.com>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */

package com.jasonv.mythsim.core;
import java.io.*;
import java.util.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 2/5/04 8:03 PM from the specification file
 * <tt>file:/home/jason/cs398/mythsim_3_0/src/org/mythsim/core/MemParser.flex</tt>
 */
class MemParser {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /**
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  7,  0,  0,  8,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     5,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  8,  6,  0, 10,
     4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  3,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = {
        0,    11,    22,    33,    11,    44,    55,    66,    11,    77,
       11,    88,    99,   110,   121,   132,   110,   143,   154,   165,
      176,   187,   198,   209,   220,   231,   242,   253
  };

  /**
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\10"+
    "\2\11\1\12\11\13\1\11\2\13\1\3\3\13\1\3"+
    "\3\13\1\11\3\13\1\4\1\5\1\4\1\13\1\7"+
    "\2\13\1\11\3\13\1\4\1\5\1\14\1\15\1\7"+
    "\2\13\1\11\3\13\1\7\1\13\1\7\1\13\1\7"+
    "\2\13\1\11\1\13\13\0\11\13\1\11\1\16\2\13"+
    "\1\4\1\5\1\17\1\20\1\7\2\13\1\11\5\13"+
    "\1\20\1\15\3\13\1\11\1\13\7\16\1\11\1\16"+
    "\1\21\1\16\2\13\1\4\1\5\1\22\1\23\1\7"+
    "\2\13\1\11\5\13\1\23\1\20\3\13\1\11\3\13"+
    "\1\4\1\5\1\24\1\25\1\7\2\13\1\11\5\13"+
    "\1\25\1\23\3\13\1\11\3\13\1\4\1\5\1\26"+
    "\1\27\1\7\2\13\1\11\5\13\1\27\1\25\3\13"+
    "\1\11\3\13\1\4\1\5\1\30\1\31\1\7\2\13"+
    "\1\11\5\13\1\31\1\27\3\13\1\11\3\13\1\4"+
    "\1\5\1\32\1\33\1\7\2\13\1\11\5\13\1\33"+
    "\1\31\3\13\1\11\3\13\1\4\1\5\1\4\1\34"+
    "\1\7\2\13\1\11\5\13\1\34\1\33\3\13\1\11"+
    "\6\13\1\34\3\13\1\11\1\13";

  /**
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  0,  1,  0,  0,  1,  0,
     1,  1,  0,  1,  0,  1,  0,  1,  0,  1,  0,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */


/* **********************************************
* Public Functions
********************************************** */

public void parse() throws java.io.IOException {
	for (int i=0; i<256; i++) {
		memory[i]=-1;
	}

	yylex();
}


public boolean isValid() {
	return ERROR_MESSAGE_TOTAL == 0;
}

public String errorMessages() {
	String temp = "---------------------------------------------\n" +
	"Errors in Memory (mem) File\n" +
	"---------------------------------------------\n" +
	ERROR_MESSAGES;
	/*if (!ERROR_DEFAULT_MESSAGE.equals("")) {
		temp += "Line ?: Syntax Error:" + ERROR_DEFAULT_MESSAGE + "\n";
	}*/
	temp += "---------------------------------------------\n" +
	ERROR_MESSAGE_TOTAL + " errors.  \n" +
	"---------------------------------------------\n";
	return temp;
}

public int[] getMemoryArray() {
	return memory;
}

/* **********************************************
* Private Data
********************************************** */

	int ERROR_MESSAGE_TOTAL = 0;
	String ERROR_MESSAGES = "";
	String ERROR_DEFAULT_MESSAGE = "";
	int memory[] = new int[256];
	int size = 0;
	int counter = 0;
	int memory_address = -1;

/* **********************************************
* Private Functions - Called By FLEX Code
********************************************** */

	/** Parse value (after ":") */
	int parseValue(String a) {
		if (a.length() == 8) {
			return string2int(a);
		} else {
			return Integer.parseInt(a);
		}
	}

	/** Convert an 8bit binary string to a int. */
	int string2int(String a) {
		String b = a.replaceAll(" ","");
		if (b.length() == 8) {
			int t = 0;
			char c[] = b.toCharArray();
			if (c[0]=='1') t -= 128;
			if (c[1]=='1') t += 64;
			if (c[2]=='1') t += 32;
			if (c[3]=='1') t += 16;
			if (c[4]=='1') t += 8;
			if (c[5]=='1') t += 4;
			if (c[6]=='1') t += 2;
			if (c[7]=='1') t += 1;
			return t;
		} else {
			return -129;
		}
	}


private void setNOTHING() {
}
private void setADDRESS() {
	String temp = yytext();
	temp = temp.replaceAll(":","");
	int addr = Integer.parseInt(temp);
	if (addr < 0 || addr > 255) {
		addError("Address " + addr + " out of range. (0-255)");
		memory_address = 0;
	} else {
		memory_address = addr;
	}
	//System.out.print(yytext());
}
private void setERROR() {
	addError("Syntax Error: " + yytext());
}
private void setBINARY_BYTE() {
	memory[memory_address] = string2int(yytext());
	//System.out.println(new Integer(memory[memory_address]));
}
private void setDECIMAL_BYTE() {
	int value = Integer.parseInt(yytext());
	if (value < -128 || value > 255) {
		addError("Value " + value + " out of range. (-128 -> 255)");
	} else {
		memory[MythSim.tc2normal(memory_address)] = MythSim.normal2tc(value);
	}
	//System.out.println(new Integer(memory[memory_address]));
}

private void setENDLINE() {
	//System.out.println("<ENDLINE>");
}

private void addError(String m) {
	ERROR_MESSAGE_TOTAL++;
	ERROR_MESSAGES += ("    Line " + (yyline+1) +
	": " + m + "\n");
}
private void addError(int l,String m) {
	ERROR_MESSAGE_TOTAL++;
	ERROR_MESSAGES += ("    Line " + l +
	": " + m + "\n");
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MemParser(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MemParser(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[264];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /**
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead,
                       yy_buffer, 0,
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead,
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof)
            yy_peek = false;
          else
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos =
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state;
            yy_markedPos_l = yy_currentPos_l;
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 4:
          { setADDRESS(); }
        case 29: break;
        case 1:
        case 9:
          { setERROR(); }
        case 30: break;
        case 25:
        case 27:
          { setBINARY_BYTE(); }
        case 31: break;
        case 0:
        case 3:
        case 5:
        case 6:
        case 11:
        case 14:
        case 17:
        case 19:
        case 21:
        case 23:
          { setDECIMAL_BYTE(); }
        case 32: break;
        case 16:
          { setNOTHING(); }
        case 33: break;
        case 7:
        case 8:
          { setNOTHING(); }
        case 34: break;
        case 2:
          { setNOTHING(); }
        case 35: break;
        default:
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          }
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
