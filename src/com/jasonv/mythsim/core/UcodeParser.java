/* The following code was generated by JFlex 1.3.5 on 2/8/04 4:56 PM */

/*
 * MythSim
 *
 * Copyright (C) 2002-2004 Jason Vroustouris <jasonv@jasonv.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package com.jasonv.mythsim.core;
import java.io.*;
import java.util.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 2/8/04 4:56 PM from the specification file
 * <tt>file:/home/jason/cs398/mythsim_3_0/src/org/mythsim/core/UcodeParser.flex</tt>
 */
class UcodeParser {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /**
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1, 44,  0,  0, 45,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 45,  0,  4, 43,
    15, 20, 21, 22, 23, 24, 25, 26, 38, 11, 13, 42,  0,  2,  0,  0,
     0, 27, 30,  7,  8,  9, 40, 39, 37, 18, 31, 32, 29, 36, 33,  5,
     6,  3, 14, 28, 19, 34, 41, 17, 35,  3,  3, 10,  0, 12,  0, 16,
     0, 27, 30,  7,  8,  9, 40, 39, 37, 18, 31, 32, 29, 36, 33,  5,
     6,  3, 14, 28, 19, 34, 41, 17, 35,  3,  3,  0,  0,  0,  0,  0
  };

  /**
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = {
        0,    46,    92,   138,   184,   230,   276,   322,   368,   414,
      460,   506,   552,   598,   644,    46,   138,    46,   690,   736,
      782,   828,   874,   920,   966,  1012,  1058,  1104,  1150,  1196,
     1242,  1288,  1334,  1380,  1426,  1472,  1518,  1564,  1610,    46,
     1656,  1702,  1748,   598,  1794,  1840,  1886,  1932,  1978,  2024,
     2070,  2116,  2162,  2208,  2254,  2300,  2346,  2392,  2438,  2484,
     2530,  2576,  2622,  2668,  2714,  2760,  2806,  2852,  2898,  2944,
     2990,   138,   138,  3036,  3082,  3128,  3174,  3220,  3266,  3312,
     3358,  3404,  3450,  3496,  3542,  3588,  3634,  3680,  3726,  3772,
     3818,  3864,  3910,  3956,  4002,  4048,  4094,  4140,  4186,  4232,
     4278,  4324,  4370,  4416,  4462,  4508,  4554,  4600,  4646,  4692,
     4738,   138,  4784,  4830,  4876,  4922,  4968,  5014,  5060,  5106,
     5152,  5198,  5244,  5290,  5336,  5382,  5428,   138,  5474,  5520,
     5566,  5612,  5658,  5704,  5750,   138,   138,  5796,  5842,  5888,
     5934,  5980,  6026,  6072,  6118,  6164,  6210,  6256,  6302,  6348,
     6394,  6440,  6486,  6532,  6578,  6624,  6670,  6716,  6762,  6808,
     6854,  6900,  6946,  6992,  7038,  7084,  7130,  7176,    46,    46,
       46,    46,    46,    46,    46,    46,  7222,    46,    46,    46,
       46,    46,    46,    46,    46,  7268,  7314,  7360,  7406,  7452,
      138,   138,   138,   138,   138,   138,   138,   138,  7498,  7544,
     7590,  7636,  7682,  7728,  7774,  7820,  7866,  7912,  7958,  8004,
     8050,  8096,  8142,  8188,  8234,    46,    46,  8280,  8326,    46,
       46,  8372,  8418,  8464,  8510,  8556,  8602,  8648,    46,    46,
       46,    46,    46,    46,    46,    46,  8694,  8740,  8786,  8832,
       46,    46,    46,  8878,  8924,    46,    46,  8970,  9016,  9062,
     9108,  9154,  9200,  9246,  9292,  9338,  9384,  9430,  9476,  9522,
     9568,  9614,  9660,  9706,  9752,  9798,  9844,  9890,  9936,  9982,
    10028, 10074, 10120, 10166, 10212, 10258, 10304, 10350, 10396, 10442,
    10488, 10534, 10580, 10626, 10672, 10718,    46, 10764,    46,    46,
       46, 10810, 10856, 10902, 10948, 10994, 11040, 11086, 11132, 11178,
    11224, 11270, 11316, 11362, 11408, 11454, 11500, 11546, 11592, 11638,
    11684, 11730, 11776, 11822, 11868, 11914,    46, 11960, 12006, 12052,
    12098, 12144, 12190, 12236, 12282, 12328, 12374, 12420, 12466, 12512,
    12558, 12604, 12650, 12696, 12742, 12788, 12834, 12880, 12926, 12972,
    13018, 13064, 13110, 13156, 13202, 13248, 13294, 13340, 13386, 13432,
    13478, 13524, 13570, 13616, 13662, 13708, 13754, 13800, 13846, 13892,
    13938, 13984, 14030, 14076, 14122, 14168, 14214, 14260, 14306, 14352,
    14398, 14444, 14490, 14536, 14582, 14628, 14674, 14720, 14766, 14812,
    14858, 14904, 14950, 14996, 15042, 15088, 15134, 15180,    46, 15226,
       46, 15272, 15318, 15364, 15410, 15456, 15502, 15548, 15594, 15640,
    15686, 15732, 15778, 15824, 15870, 15916, 15962, 16008, 16054,    46,
    16100, 16146, 16192, 16238, 16284, 16330, 16376,    46, 16422, 16468,
    16514, 16560, 16606,    46, 16652, 16698, 16744, 16790, 16836, 16882,
    16928, 16974, 17020, 17066, 17112, 17158, 17204, 17250, 17296, 17342,
    17388, 17434, 17480, 17526, 17572, 17618, 17664, 17710, 17756, 17802,
    17848, 17894, 17940, 17986, 18032, 18078, 18124, 18170, 18216, 18262,
    18308, 18354, 18400, 18446, 18492, 18538, 18584, 18630, 18676, 18722,
    18768, 18814, 18860, 18906, 18952, 18998, 19044, 19090, 19136, 19182,
    19228, 19274,    46, 19320, 19366, 19412, 19458, 19504, 19550, 19596,
    19642, 19688, 19734, 19780, 19826,    46, 19872, 19918, 19964, 20010,
       46, 20056, 20102,    46, 20148, 20194, 20240, 20286, 20332, 20378
  };

  /**
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 =
    "\1\2\1\3\1\2\1\4\1\2\1\5\1\4\1\6"+
    "\2\4\1\2\1\4\2\2\1\7\2\4\1\10\1\11"+
    "\10\4\1\12\2\4\1\13\5\4\1\14\2\4\1\15"+
    "\2\4\1\16\1\17\2\20\57\0\1\3\57\0\7\21"+
    "\1\0\1\21\1\0\1\22\34\21\7\0\3\21\1\23"+
    "\3\21\1\0\1\21\1\0\1\22\34\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\2\21\1\24\31\21\7\0"+
    "\6\21\1\25\1\0\1\21\1\0\1\22\1\21\1\26"+
    "\2\21\1\27\1\21\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\4\21\1\37\1\40\11\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\1\41\33\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\1\42\31\21\1\43\1\21"+
    "\7\0\7\21\1\0\1\21\1\0\1\22\2\21\1\44"+
    "\14\21\1\45\14\21\5\0\1\46\1\0\7\21\1\0"+
    "\1\21\1\0\1\22\2\21\1\47\31\21\1\50\6\0"+
    "\5\21\1\51\1\21\1\0\1\21\1\0\1\22\15\21"+
    "\1\52\16\21\7\0\2\21\1\53\4\21\1\0\1\21"+
    "\1\0\1\22\34\21\5\0\1\54\34\0\1\50\72\0"+
    "\1\55\5\0\4\21\1\56\2\21\1\0\1\21\1\0"+
    "\1\22\34\21\7\0\7\21\1\0\1\21\1\0\1\22"+
    "\4\21\1\57\27\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\15\21\1\60\1\61\15\21\7\0\7\21\1\0"+
    "\1\21\1\0\1\22\2\21\1\62\31\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\2\21\1\63\31\21\7\0"+
    "\7\21\1\0\1\21\1\0\1\22\2\21\1\64\31\21"+
    "\7\0\7\21\1\0\1\21\1\0\1\22\2\21\1\65"+
    "\31\21\7\0\7\21\1\0\1\21\1\0\1\22\2\21"+
    "\1\66\31\21\7\0\7\21\1\0\1\21\1\0\1\22"+
    "\2\21\1\67\31\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\2\21\1\70\31\21\7\0\7\21\1\0\1\21"+
    "\1\0\1\22\2\21\1\71\31\21\7\0\7\21\1\0"+
    "\1\21\1\0\1\22\2\21\1\72\31\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\2\21\1\73\31\21\7\0"+
    "\7\21\1\0\1\21\1\0\1\22\2\21\1\74\31\21"+
    "\7\0\7\21\1\0\1\21\1\0\1\22\4\21\1\75"+
    "\27\21\7\0\7\21\1\0\1\21\1\0\1\22\1\21"+
    "\1\76\4\21\1\77\25\21\5\0\1\100\1\0\7\21"+
    "\1\0\1\21\1\0\1\22\34\21\7\0\7\21\1\0"+
    "\1\21\1\0\1\22\16\21\1\101\15\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\24\21\1\102\7\21\5\0"+
    "\1\46\50\0\1\50\6\0\7\21\1\0\1\21\1\0"+
    "\1\22\16\21\1\103\15\21\7\0\7\21\1\0\1\21"+
    "\1\0\1\22\1\104\33\21\7\0\7\21\1\0\1\21"+
    "\1\0\1\22\1\105\33\21\7\0\7\21\1\0\1\21"+
    "\1\0\1\22\5\21\1\106\26\21\4\0\54\55\1\20"+
    "\1\55\3\0\2\21\1\107\4\21\1\0\1\21\1\0"+
    "\1\22\34\21\7\0\7\21\1\0\1\21\1\0\1\22"+
    "\23\21\1\110\10\21\7\0\5\21\1\111\1\21\1\0"+
    "\1\21\1\0\1\22\34\21\7\0\7\21\1\0\1\21"+
    "\1\0\1\22\24\21\1\112\7\21\7\0\7\21\1\0"+
    "\1\21\1\0\1\22\3\21\1\113\30\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\16\21\1\114\15\21\7\0"+
    "\7\21\1\0\1\21\1\0\1\22\3\21\1\115\30\21"+
    "\7\0\7\21\1\0\1\21\1\0\1\22\3\21\1\116"+
    "\30\21\7\0\7\21\1\0\1\21\1\0\1\22\3\21"+
    "\1\117\30\21\7\0\7\21\1\0\1\21\1\0\1\22"+
    "\3\21\1\120\30\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\3\21\1\121\30\21\7\0\7\21\1\0\1\21"+
    "\1\0\1\22\3\21\1\122\30\21\7\0\7\21\1\0"+
    "\1\21\1\0\1\22\3\21\1\123\30\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\16\21\1\124\15\21\7\0"+
    "\7\21\1\0\1\21\1\0\1\22\16\21\1\125\15\21"+
    "\7\0\7\21\1\0\1\21\1\0\1\22\5\21\1\126"+
    "\26\21\7\0\7\21\1\0\1\21\1\0\1\22\2\21"+
    "\1\127\31\21\7\0\7\21\1\0\1\21\1\0\1\22"+
    "\2\21\1\130\31\21\5\0\1\100\5\0\1\131\11\0"+
    "\1\132\22\0\1\133\4\0\1\134\7\0\6\21\1\135"+
    "\1\0\1\21\1\0\1\22\34\21\7\0\7\21\1\0"+
    "\1\21\1\0\1\22\2\21\1\136\31\21\7\0\6\21"+
    "\1\137\1\0\1\21\1\0\1\22\34\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\2\21\1\140\31\21\7\0"+
    "\7\21\1\0\1\21\1\0\1\22\2\21\1\141\31\21"+
    "\7\0\2\21\1\142\4\21\1\0\1\21\1\0\1\22"+
    "\34\21\7\0\5\21\1\143\1\21\1\0\1\21\1\0"+
    "\1\22\34\21\7\0\7\21\1\0\1\21\1\0\1\22"+
    "\17\21\1\144\14\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\1\145\33\21\7\0\6\21\1\146\1\0\1\21"+
    "\1\0\1\22\34\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\1\147\33\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\1\150\33\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\1\151\33\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\1\152\33\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\1\153\33\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\1\154\33\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\1\155\33\21\7\0\6\21\1\156\1\0\1\21"+
    "\1\0\1\22\34\21\7\0\6\21\1\157\1\0\1\21"+
    "\1\0\1\22\34\21\7\0\6\21\1\160\1\0\1\21"+
    "\1\0\1\22\34\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\16\21\1\161\15\21\7\0\7\21\1\0\1\21"+
    "\1\0\1\22\16\21\1\162\15\21\24\0\1\163\70\0"+
    "\1\164\42\0\1\165\36\0\1\166\57\0\7\21\1\0"+
    "\1\21\1\0\1\22\17\21\1\167\14\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\16\21\1\170\15\21\7\0"+
    "\7\21\1\0\1\21\1\0\1\22\17\21\1\171\14\21"+
    "\7\0\7\21\1\0\1\21\1\0\1\22\16\21\1\172"+
    "\15\21\7\0\7\21\1\0\1\21\1\0\1\22\16\21"+
    "\1\173\15\21\5\0\1\174\1\0\7\21\1\0\1\21"+
    "\1\0\1\22\34\21\7\0\6\21\1\175\1\0\1\21"+
    "\1\0\1\22\34\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\5\21\1\176\26\21\7\0\7\21\1\0\1\21"+
    "\1\0\1\22\4\21\1\177\27\21\7\0\7\21\1\0"+
    "\1\21\1\0\1\22\17\21\1\200\14\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\4\21\1\201\27\21\7\0"+
    "\7\21\1\0\1\21\1\0\1\22\4\21\1\202\27\21"+
    "\7\0\7\21\1\0\1\21\1\0\1\22\4\21\1\203"+
    "\27\21\7\0\7\21\1\0\1\21\1\0\1\22\4\21"+
    "\1\204\27\21\7\0\7\21\1\0\1\21\1\0\1\22"+
    "\4\21\1\205\27\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\4\21\1\206\27\21\7\0\7\21\1\0\1\21"+
    "\1\0\1\22\4\21\1\207\27\21\7\0\7\21\1\0"+
    "\1\21\1\0\1\22\17\21\1\210\14\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\17\21\1\211\14\21\7\0"+
    "\6\21\1\212\1\0\1\21\1\0\1\22\34\21\7\0"+
    "\6\21\1\213\1\0\1\21\1\0\1\22\34\21\11\0"+
    "\1\214\72\0\1\215\65\0\1\216\24\0\1\166\21\0"+
    "\1\217\33\0\1\220\1\221\7\21\1\0\1\21\1\0"+
    "\1\22\34\21\7\0\6\21\1\222\1\0\1\21\1\0"+
    "\1\22\34\21\5\0\1\223\1\224\7\21\1\0\1\21"+
    "\1\0\1\22\34\21\7\0\6\21\1\225\1\0\1\21"+
    "\1\0\1\22\34\21\7\0\6\21\1\226\1\0\1\21"+
    "\1\0\1\22\34\21\5\0\1\174\1\0\1\227\1\0"+
    "\1\230\4\227\1\0\1\227\2\0\34\227\7\0\7\21"+
    "\1\231\1\21\1\0\1\22\34\21\7\0\7\21\1\0"+
    "\1\21\1\0\1\22\2\21\1\232\31\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\5\21\1\233\26\21\7\0"+
    "\7\21\1\0\1\21\1\0\1\22\5\21\1\234\26\21"+
    "\7\0\7\21\1\0\1\21\1\0\1\22\5\21\1\235"+
    "\26\21\7\0\7\21\1\0\1\21\1\0\1\22\5\21"+
    "\1\236\26\21\7\0\7\21\1\0\1\21\1\0\1\22"+
    "\5\21\1\237\26\21\7\0\7\21\1\0\1\21\1\0"+
    "\1\22\5\21\1\240\26\21\7\0\7\21\1\0\1\21"+
    "\1\0\1\22\5\21\1\241\26\21\7\0\7\21\1\0"+
    "\1\21\1\0\1\22\5\21\1\242\26\21\7\0\7\21"+
    "\1\0\1\21\1\0\1\22\17\21\1\243\14\21\7\0"+
    "\7\21\1\0\1\21\1\0\1\22\17\21\1\244\14\21"+
    "\46\0\1\245\36\0\1\246\33\0\1\247\121\0\1\250"+
    "\11\0\1\220\1\221\54\0\1\221\15\0\1\251\4\0"+
    "\1\252\1\253\1\254\1\255\1\256\1\257\1\260\26\0"+
    "\7\21\1\0\1\21\1\0\1\22\17\21\1\261\14\21"+
    "\5\0\1\223\1\224\54\0\1\224\15\0\1\262\4\0"+
    "\1\263\1\264\1\265\1\266\1\267\1\270\1\271\26\0"+
    "\7\21\1\0\1\21\1\0\1\22\17\21\1\272\14\21"+
    "\7\0\7\21\1\0\1\21\1\0\1\22\17\21\1\273"+
    "\14\21\7\0\7\227\1\0\1\227\2\0\34\227\7\0"+
    "\3\227\1\274\3\227\1\0\1\227\2\0\34\227\17\0"+
    "\1\275\3\0\1\275\4\0\7\275\13\0\1\275\12\0"+
    "\7\21\1\0\1\21\1\0\1\22\16\21\1\276\15\21"+
    "\7\0\6\21\1\277\1\0\1\21\1\0\1\22\34\21"+
    "\7\0\6\21\1\300\1\0\1\21\1\0\1\22\34\21"+
    "\7\0\6\21\1\301\1\0\1\21\1\0\1\22\34\21"+
    "\7\0\6\21\1\302\1\0\1\21\1\0\1\22\34\21"+
    "\7\0\6\21\1\303\1\0\1\21\1\0\1\22\34\21"+
    "\7\0\6\21\1\304\1\0\1\21\1\0\1\22\34\21"+
    "\7\0\6\21\1\305\1\0\1\21\1\0\1\22\34\21"+
    "\7\0\6\21\1\306\1\0\1\21\1\0\1\22\34\21"+
    "\5\0\1\307\1\310\7\21\1\0\1\21\1\0\1\22"+
    "\34\21\5\0\1\311\1\312\7\21\1\0\1\21\1\0"+
    "\1\22\34\21\27\0\1\313\33\0\1\314\55\0\1\247"+
    "\21\0\1\315\43\0\1\316\45\0\1\317\1\320\7\21"+
    "\1\0\1\21\1\0\1\22\34\21\5\0\1\321\1\322"+
    "\7\21\1\0\1\21\1\0\1\22\34\21\5\0\1\323"+
    "\1\324\7\21\1\0\1\21\1\0\1\22\34\21\7\0"+
    "\4\227\1\325\2\227\1\0\1\227\2\0\34\227\17\0"+
    "\1\275\1\326\2\0\1\275\4\0\7\275\13\0\1\275"+
    "\12\0\6\21\1\327\1\0\1\21\1\0\1\22\34\21"+
    "\5\0\1\307\1\310\54\0\1\310\15\0\1\330\4\0"+
    "\1\331\10\0\1\332\7\0\1\333\11\0\1\311\1\312"+
    "\54\0\1\312\15\0\1\334\4\0\1\335\10\0\1\336"+
    "\7\0\1\337\11\0\1\340\55\0\1\314\21\0\1\341"+
    "\77\0\1\342\51\0\1\343\15\0\1\317\1\320\54\0"+
    "\1\320\3\0\1\344\11\0\1\345\4\0\1\346\1\347"+
    "\1\350\1\351\1\352\1\353\1\354\1\355\1\356\4\0"+
    "\1\357\1\0\1\360\13\0\1\321\1\322\54\0\1\322"+
    "\15\0\1\361\4\0\1\362\1\363\7\0\1\364\7\0"+
    "\1\365\11\0\1\323\1\324\54\0\1\324\15\0\1\366"+
    "\4\0\1\367\10\0\1\370\7\0\1\371\13\0\2\227"+
    "\1\372\4\227\1\0\1\227\2\0\34\227\21\0\1\22"+
    "\43\0\7\21\1\0\1\21\1\0\1\22\17\21\1\373"+
    "\14\21\11\0\1\374\55\0\1\375\55\0\1\376\55\0"+
    "\1\377\51\0\1\340\21\0\1\u0100\77\0\1\u0101\21\0"+
    "\1\u0102\45\0\1\u0103\72\0\1\346\47\0\1\u0104\30\0"+
    "\1\u0105\56\0\1\u0106\20\0\1\u0107\55\0\1\u0108\55\0"+
    "\1\u0109\55\0\1\u010a\55\0\1\u010b\55\0\1\u010c\53\0"+
    "\5\227\1\u010d\1\227\1\0\1\227\2\0\34\227\5\0"+
    "\1\u010e\1\u010f\7\21\1\0\1\21\1\0\1\22\34\21"+
    "\37\0\1\u0110\57\0\1\u0111\53\0\1\u0112\57\0\1\u0113"+
    "\65\0\1\u0114\21\0\1\u0115\105\0\1\u0116\15\0\1\u0103"+
    "\45\0\1\u0117\16\0\1\u0118\55\0\1\347\103\0\1\u0119"+
    "\42\0\1\345\50\0\1\350\72\0\1\u011a\57\0\1\u011b"+
    "\53\0\1\u011c\57\0\1\u011d\23\0\6\227\1\u011e\1\0"+
    "\1\227\2\0\34\227\5\0\1\u010e\1\u010f\54\0\1\u010f"+
    "\15\0\1\u011f\2\0\1\u0120\1\0\1\u0121\1\u0122\1\u0123"+
    "\4\0\1\u0124\10\0\1\u0125\21\0\1\331\55\0\1\330"+
    "\55\0\1\335\55\0\1\334\56\0\1\u0126\105\0\1\u0127"+
    "\15\0\1\u0128\61\0\1\u0129\103\0\1\353\55\0\1\354"+
    "\32\0\1\u012a\55\0\1\361\55\0\1\367\55\0\1\366"+
    "\50\0\7\227\1\u012b\1\227\2\0\34\227\22\0\1\u012c"+
    "\74\0\1\u012d\30\0\1\u012e\106\0\1\u012f\15\0\1\u0130"+
    "\55\0\1\u0128\45\0\1\u0131\31\0\1\u0132\52\0\1\u0133"+
    "\50\0\1\u0134\3\0\1\u0134\2\0\1\u0135\1\0\7\u0134"+
    "\13\0\1\u0134\27\0\1\u0136\77\0\1\u011f\31\0\1\u0121"+
    "\40\0\1\u0137\55\0\1\u0130\45\0\1\u0138\13\0\1\u0139"+
    "\55\0\1\u013a\103\0\1\u013b\10\0\1\u013c\24\0\1\u0134"+
    "\1\u013d\2\0\1\u0134\4\0\7\u0134\13\0\1\u0134\25\0"+
    "\1\u013e\46\0\1\u013f\47\0\1\u0137\45\0\1\u0140\13\0"+
    "\1\u0141\73\0\1\u0142\33\0\1\u0143\111\0\1\u0144\31\0"+
    "\1\u0145\64\0\1\u0146\42\0\1\u0147\55\0\1\u0148\73\0"+
    "\1\u0149\37\0\1\u014a\51\0\1\u0143\1\0\1\u014b\1\0"+
    "\1\u014c\4\u014b\1\0\1\u014b\2\0\34\u014b\46\0\1\362"+
    "\57\0\1\363\16\0\1\u014d\111\0\1\u014e\37\0\1\u014f"+
    "\37\0\1\u0150\51\0\1\u0151\55\0\1\u0152\1\0\7\u014b"+
    "\1\0\1\u014b\2\0\34\u014b\5\0\1\u0152\1\0\3\u014b"+
    "\1\u0153\3\u014b\1\0\1\u014b\2\0\34\u014b\12\0\1\u0154"+
    "\103\0\1\u0155\26\0\1\u0156\51\0\1\u0157\55\0\1\u0151"+
    "\1\0\1\u0158\1\0\1\u0159\4\u0158\1\0\1\u0158\2\0"+
    "\34\u0158\5\0\1\u0152\7\0\1\u015a\45\0\1\u0152\1\0"+
    "\4\u014b\1\u015b\2\u014b\1\0\1\u014b\2\0\34\u014b\13\0"+
    "\1\u015c\71\0\1\u015d\33\0\1\u015e\55\0\1\u0157\1\0"+
    "\1\u015f\1\0\1\u0160\4\u015f\1\0\1\u015f\2\0\34\u015f"+
    "\5\0\1\u0161\1\0\7\u0158\1\0\1\u0158\2\0\34\u0158"+
    "\5\0\1\u0161\1\0\3\u0158\1\u0162\3\u0158\1\0\1\u0158"+
    "\2\0\34\u0158\41\0\1\u0163\3\0\1\u0164\15\0\1\u0152"+
    "\1\0\2\u014b\1\u0165\4\u014b\1\0\1\u014b\2\0\34\u014b"+
    "\11\0\1\u0166\77\0\1\u0122\16\0\1\u0123\10\0\1\u015e"+
    "\1\0\1\u0167\1\0\1\u0168\4\u0167\1\0\1\u0167\2\0"+
    "\34\u0167\5\0\1\u0169\1\0\7\u015f\1\0\1\u015f\2\0"+
    "\34\u015f\5\0\1\u0169\1\0\3\u015f\1\u016a\3\u015f\1\0"+
    "\1\u015f\2\0\34\u015f\5\0\1\u0161\7\0\1\u016b\45\0"+
    "\1\u0161\1\0\4\u0158\1\u016c\2\u0158\1\0\1\u0158\2\0"+
    "\34\u0158\40\0\1\u016d\31\0\1\u016e\46\0\1\u0152\1\0"+
    "\5\u014b\1\u016f\1\u014b\1\0\1\u014b\2\0\34\u014b\14\0"+
    "\1\u0170\46\0\1\u0171\1\0\7\u0167\1\0\1\u0167\2\0"+
    "\34\u0167\5\0\1\u0171\1\0\3\u0167\1\u0172\3\u0167\1\0"+
    "\1\u0167\2\0\34\u0167\5\0\1\u0169\7\0\1\u0173\45\0"+
    "\1\u0169\1\0\4\u015f\1\u0174\2\u015f\1\0\1\u015f\2\0"+
    "\34\u015f\41\0\1\u0175\3\0\1\u0176\15\0\1\u0161\1\0"+
    "\2\u0158\1\u0177\4\u0158\1\0\1\u0158\2\0\34\u0158\15\0"+
    "\1\u0178\66\0\1\u0179\34\0\1\u0152\1\0\6\u014b\1\u017a"+
    "\1\0\1\u014b\2\0\34\u014b\15\0\1\u017b\45\0\1\u0171"+
    "\7\0\1\u017c\45\0\1\u0171\1\0\4\u0167\1\u017d\2\u0167"+
    "\1\0\1\u0167\2\0\34\u0167\41\0\1\u017e\3\0\1\u017f"+
    "\15\0\1\u0169\1\0\2\u015f\1\u0180\4\u015f\1\0\1\u015f"+
    "\2\0\34\u015f\40\0\1\u0181\31\0\1\u0182\46\0\1\u0161"+
    "\1\0\5\u0158\1\u0183\1\u0158\1\0\1\u0158\2\0\34\u0158"+
    "\5\0\1\u0184\124\0\1\u0185\6\0\1\u0152\1\0\7\u014b"+
    "\1\u0186\1\u014b\2\0\34\u014b\20\0\1\u0187\76\0\1\u0188"+
    "\3\0\1\u0189\15\0\1\u0171\1\0\2\u0167\1\u018a\4\u0167"+
    "\1\0\1\u0167\2\0\34\u0167\40\0\1\u018b\31\0\1\u018c"+
    "\46\0\1\u0169\1\0\5\u015f\1\u018d\1\u015f\1\0\1\u015f"+
    "\2\0\34\u015f\15\0\1\u018e\66\0\1\u018f\34\0\1\u0161"+
    "\1\0\6\u0158\1\u0190\1\0\1\u0158\2\0\34\u0158\5\0"+
    "\1\u0184\45\0\1\u0191\21\0\1\u0192\3\0\1\u0192\4\0"+
    "\7\u0192\13\0\1\u0192\43\0\1\u0193\31\0\1\u0194\46\0"+
    "\1\u0171\1\0\5\u0167\1\u0195\1\u0167\1\0\1\u0167\2\0"+
    "\34\u0167\15\0\1\u0196\66\0\1\u0197\34\0\1\u0169\1\0"+
    "\6\u015f\1\u0198\1\0\1\u015f\2\0\34\u015f\5\0\1\u0199"+
    "\124\0\1\u019a\6\0\1\u0161\1\0\7\u0158\1\u019b\1\u0158"+
    "\2\0\34\u0158\11\0\1\u019c\63\0\1\u0192\1\u019d\2\0"+
    "\1\u0192\4\0\7\u0192\13\0\1\u0192\20\0\1\u019e\66\0"+
    "\1\u019f\34\0\1\u0171\1\0\6\u0167\1\u01a0\1\0\1\u0167"+
    "\2\0\34\u0167\5\0\1\u01a1\124\0\1\u01a2\6\0\1\u0169"+
    "\1\0\7\u015f\1\u01a3\1\u015f\2\0\34\u015f\5\0\1\u0199"+
    "\45\0\1\u01a4\21\0\1\u01a5\3\0\1\u01a5\4\0\7\u01a5"+
    "\13\0\1\u01a5\32\0\1\u01a6\33\0\1\u0152\55\0\1\u01a7"+
    "\124\0\1\u01a8\6\0\1\u0171\1\0\7\u0167\1\u01a9\1\u0167"+
    "\2\0\34\u0167\5\0\1\u01a1\45\0\1\u01aa\21\0\1\u01ab"+
    "\3\0\1\u01ab\4\0\7\u01ab\13\0\1\u01ab\14\0\1\u01ac"+
    "\63\0\1\u01a5\1\u01ad\2\0\1\u01a5\4\0\7\u01a5\13\0"+
    "\1\u01a5\14\0\1\u01ae\51\0\1\u01a7\45\0\1\u01af\21\0"+
    "\1\u01b0\3\0\1\u01b0\4\0\7\u01b0\13\0\1\u01b0\14\0"+
    "\1\u01b1\63\0\1\u01ab\1\u01b2\2\0\1\u01ab\4\0\7\u01ab"+
    "\13\0\1\u01ab\32\0\1\u01b3\33\0\1\u0161\55\0\1\u01b4"+
    "\61\0\1\u01b5\63\0\1\u01b0\1\u01b6\2\0\1\u01b0\4\0"+
    "\7\u01b0\13\0\1\u01b0\32\0\1\u01b7\33\0\1\u0169\61\0"+
    "\1\u01b8\51\0\1\u01b4\1\0\1\u01b9\1\0\1\u01ba\4\u01b9"+
    "\1\0\1\u01b9\2\0\34\u01b9\27\0\1\u01bb\33\0\1\u0171"+
    "\61\0\1\u01bc\51\0\1\u01bd\55\0\1\u01be\1\0\7\u01b9"+
    "\1\0\1\u01b9\2\0\34\u01b9\5\0\1\u01be\1\0\3\u01b9"+
    "\1\u01bf\3\u01b9\1\0\1\u01b9\2\0\34\u01b9\11\0\1\u01c0"+
    "\51\0\1\u01c1\55\0\1\u01bd\1\0\1\u01c2\1\0\1\u01c3"+
    "\4\u01c2\1\0\1\u01c2\2\0\34\u01c2\5\0\1\u01be\7\0"+
    "\1\u01c4\45\0\1\u01be\1\0\4\u01b9\1\u01c5\2\u01b9\1\0"+
    "\1\u01b9\2\0\34\u01b9\5\0\1\u01c6\55\0\1\u01c1\1\0"+
    "\1\u01c7\1\0\1\u01c8\4\u01c7\1\0\1\u01c7\2\0\34\u01c7"+
    "\5\0\1\u01c9\1\0\7\u01c2\1\0\1\u01c2\2\0\34\u01c2"+
    "\5\0\1\u01c9\1\0\3\u01c2\1\u01ca\3\u01c2\1\0\1\u01c2"+
    "\2\0\34\u01c2\45\0\1\u01cb\15\0\1\u01be\1\0\2\u01b9"+
    "\1\u01cc\4\u01b9\1\0\1\u01b9\2\0\34\u01b9\5\0\1\u01c6"+
    "\1\0\1\u01cd\1\0\1\u01ce\4\u01cd\1\0\1\u01cd\2\0"+
    "\34\u01cd\5\0\1\u01cf\1\0\7\u01c7\1\0\1\u01c7\2\0"+
    "\34\u01c7\5\0\1\u01cf\1\0\3\u01c7\1\u01d0\3\u01c7\1\0"+
    "\1\u01c7\2\0\34\u01c7\5\0\1\u01c9\7\0\1\u01d1\45\0"+
    "\1\u01c9\1\0\4\u01c2\1\u01d2\2\u01c2\1\0\1\u01c2\2\0"+
    "\34\u01c2\14\0\1\u01d3\46\0\1\u01be\1\0\5\u01b9\1\u01d4"+
    "\1\u01b9\1\0\1\u01b9\2\0\34\u01b9\5\0\1\u01d5\1\0"+
    "\7\u01cd\1\0\1\u01cd\2\0\34\u01cd\5\0\1\u01d5\1\0"+
    "\3\u01cd\1\u01d6\3\u01cd\1\0\1\u01cd\2\0\34\u01cd\5\0"+
    "\1\u01cf\7\0\1\u01d7\45\0\1\u01cf\1\0\4\u01c7\1\u01d8"+
    "\2\u01c7\1\0\1\u01c7\2\0\34\u01c7\45\0\1\u01d9\15\0"+
    "\1\u01c9\1\0\2\u01c2\1\u01da\4\u01c2\1\0\1\u01c2\2\0"+
    "\34\u01c2\26\0\1\u01db\34\0\1\u01be\1\0\6\u01b9\1\u01dc"+
    "\1\0\1\u01b9\2\0\34\u01b9\5\0\1\u01d5\7\0\1\u01dd"+
    "\45\0\1\u01d5\1\0\4\u01cd\1\u01de\2\u01cd\1\0\1\u01cd"+
    "\2\0\34\u01cd\45\0\1\u01df\15\0\1\u01cf\1\0\2\u01c7"+
    "\1\u01e0\4\u01c7\1\0\1\u01c7\2\0\34\u01c7\14\0\1\u01e1"+
    "\46\0\1\u01c9\1\0\5\u01c2\1\u01e2\1\u01c2\1\0\1\u01c2"+
    "\2\0\34\u01c2\54\0\1\u01e3\6\0\1\u01be\1\0\7\u01b9"+
    "\1\u01e4\1\u01b9\2\0\34\u01b9\45\0\1\u01e5\15\0\1\u01d5"+
    "\1\0\2\u01cd\1\u01e6\4\u01cd\1\0\1\u01cd\2\0\34\u01cd"+
    "\14\0\1\u01e7\46\0\1\u01cf\1\0\5\u01c7\1\u01e8\1\u01c7"+
    "\1\0\1\u01c7\2\0\34\u01c7\26\0\1\u01e9\34\0\1\u01c9"+
    "\1\0\6\u01c2\1\u01ea\1\0\1\u01c2\2\0\34\u01c2\17\0"+
    "\1\u01eb\3\0\1\u01eb\4\0\7\u01eb\13\0\1\u01eb\17\0"+
    "\1\u01ec\46\0\1\u01d5\1\0\5\u01cd\1\u01ed\1\u01cd\1\0"+
    "\1\u01cd\2\0\34\u01cd\26\0\1\u01ee\34\0\1\u01cf\1\0"+
    "\6\u01c7\1\u01ef\1\0\1\u01c7\2\0\34\u01c7\54\0\1\u01f0"+
    "\6\0\1\u01c9\1\0\7\u01c2\1\u01f1\1\u01c2\2\0\34\u01c2"+
    "\17\0\1\u01eb\1\u01f2\2\0\1\u01eb\4\0\7\u01eb\13\0"+
    "\1\u01eb\31\0\1\u01f3\34\0\1\u01d5\1\0\6\u01cd\1\u01f4"+
    "\1\0\1\u01cd\2\0\34\u01cd\54\0\1\u01f5\6\0\1\u01cf"+
    "\1\0\7\u01c7\1\u01f6\1\u01c7\2\0\34\u01c7\17\0\1\u01f7"+
    "\3\0\1\u01f7\4\0\7\u01f7\13\0\1\u01f7\10\0\1\u01be"+
    "\124\0\1\u01f8\6\0\1\u01d5\1\0\7\u01cd\1\u01f9\1\u01cd"+
    "\2\0\34\u01cd\17\0\1\u01fa\3\0\1\u01fa\4\0\7\u01fa"+
    "\13\0\1\u01fa\22\0\1\u01f7\1\u01fb\2\0\1\u01f7\4\0"+
    "\7\u01f7\13\0\1\u01f7\22\0\1\u01fc\3\0\1\u01fc\4\0"+
    "\7\u01fc\13\0\1\u01fc\22\0\1\u01fa\1\u01fd\2\0\1\u01fa"+
    "\4\0\7\u01fa\13\0\1\u01fa\10\0\1\u01c9\67\0\1\u01fc"+
    "\1\u01fe\2\0\1\u01fc\4\0\7\u01fc\13\0\1\u01fc\10\0"+
    "\1\u01cf\55\0\1\u01d5\54\0";

  /**
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,
     0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,
     0,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  1,  0,  0,  1,  1,
     1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  1,  0,  0,  9,  9,  0,  0,  9,  9,  0,  0,  0,
     0,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0,
     9,  9,  9,  0,  0,  9,  9,  0,  0,  1,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  1,  9,  0,
     9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,
     0,  9,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,
     0,  0,  0,  0,  9,  0,  0,  9,  0,  0,  0,  0,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */

/* **********************************************
* Control Line Constants
********************************************** */

	public static final int R0_WRITE          = 0;
	public static final int R1_WRITE          = 1;
	public static final int R2_WRITE          = 2;
	public static final int R3_WRITE          = 3;
	public static final int R4_WRITE          = 4;
	public static final int R5_WRITE          = 5;
	public static final int R6_WRITE          = 6;
	public static final int R7_WRITE          = 7;
	public static final int A_SEL             = 8;
	public static final int B_SEL             = 9;
	public static final int RI_SEL            = 10;
	public static final int RJ_SEL            = 11;
	public static final int RK_SEL            = 12;
	public static final int C_IN              = 13;
	public static final int ALU_SEL           = 14;
	public static final int MDR_SEL           = 15;
	public static final int MAR_SEL           = 16;
	public static final int RESULT_SEL        = 17;
	public static final int IR0_SEL           = 18;
	public static final int IR1_SEL           = 19;
	public static final int READ              = 20;
	public static final int WRITE             = 21;
	public static final int INDEX_SEL         = 22;
	public static final int COND              = 23;
	public static final int ADDRESS_TRUE      = 24;
	public static final int ADDRESS_FALSE     = 25;
	public static final int ADDRESS           = 26;
	public static final int R0_WRITE_SET      = 27;
	public static final int R1_WRITE_SET      = 28;
	public static final int R2_WRITE_SET      = 29;
	public static final int R3_WRITE_SET      = 30;
	public static final int R4_WRITE_SET      = 31;
	public static final int R5_WRITE_SET      = 32;
	public static final int R6_WRITE_SET      = 33;
	public static final int R7_WRITE_SET      = 34;
	public static final int A_SEL_SET         = 35;
	public static final int B_SEL_SET         = 36;
	public static final int RI_SEL_SET        = 37;
	public static final int RJ_SEL_SET        = 38;
	public static final int RK_SEL_SET        = 39;
	public static final int C_IN_SET          = 40;
	public static final int ALU_SEL_SET       = 41;
	public static final int MDR_SEL_SET       = 42;
	public static final int MAR_SEL_SET       = 43;
	public static final int RESULT_SEL_SET    = 44;
	public static final int IR0_SEL_SET       = 45;
	public static final int IR1_SEL_SET       = 46;
	public static final int READ_SET          = 47;
	public static final int WRITE_SET         = 48;
	public static final int INDEX_SEL_SET     = 49;
	public static final int COND_SET          = 50;
	public static final int ADDRESS_TRUE_SET  = 51;
	public static final int ADDRESS_FALSE_SET = 52;
	public static final int ADDRESS_SET       = 53;
	public static final int CONTROL_WORD_LENGTH = 54;

/* **********************************************
* Extended Control Line Constants
********************************************** */

	public static final int	LABEL		  = 27;
	public static final int GOTO_OPCODE	  = 28;
	public static final int GOTO_LABEL	  = 29;
	public static final int IF_THEN		  = 30;
	public static final int IF_THEN_ELSE  = 31;
	public static final int INIT		  = 32;
	public static final int	SEMICOLON	  = 33;
	public static final int	RESOLVE		  = 34;
	public static final int	NOSEMICOLON   = 35;
	public static final int	NOTHING		  = 36;
	public static final int	ERROR		  = 37;
	public static final int	BREAK		  = 38;

/* **********************************************
* Control Line Constant String Array
********************************************** */

	public static final String ControlLine_Name[] = {"R0_WRITE",
	"R1_WRITE", "R2_WRITE", "R3_WRITE", "R4_WRITE",
	"R5_WRITE", "R6_WRITE", "R7_WRITE", "A_SEL", "B_SEL",
	"RI_SEL","RJ_SEL","RK_SEL","C_IN","ALU_SEL","MDR_SEL","MAR_SEL",
	"RESULT_SEL","IR0_SEL","IR1_SEL","READ","WRITE","INDEX_SEL",
	"COND","ADDRESS_TRUE","ADDRESS_FALSE","ADDRESS","LABEL",
	"GOTO_OPCODE","GOTO_LABEL","IF_THEN","IF_THEN_ELSE","INIT","SEMICOLON",
	"RESOLVE","NOSEMICOLON","NOTHING","ERROR","BREAK"};

/* **********************************************
* Public Functions
********************************************** */

public void parse() throws java.io.IOException {
	yylex();
	// Resolve Addresses
	String label[] = new String[ucodememory.size()];
	for (int i=0; i<ucodememory.size(); i++) {
		label[i] = ((ControlWord)ucodememory.get(i)).label();
	}
	for (int i=0; i<ucodememory.size(); i++) {
		ControlWord cw = ((ControlWord)ucodememory.get(i));
		if (cw.resolve_addr(label)) {}
		if (cw.getTrueLabel().equals(cw.getFalseLabel())) {
			if(!cw.validTrueLabel()) {
				addError(cw.getLineNumber(),cw.getTrueLabel() + " not found.");
			} else {
				if(!cw.validFalseLabel()) {
					addError(cw.getLineNumber(),cw.getFalseLabel() + " not found.");
				}
			}
		} else {
			if(!cw.validTrueLabel()) {
				addError(cw.getLineNumber(),cw.getTrueLabel() + " not found.");
			}
			if(!cw.validFalseLabel()) {
				addError(cw.getLineNumber(),cw.getFalseLabel() + " not found.");
			}
		}
	}
}

public Vector getUcodeVector() {
	//System.out.println("getUcodeVector");
	return ucodememory;
}

public boolean isValid() {
	return ERROR_MESSAGE_TOTAL == 0;
}

public String errorMessages() {
	String temp = "---------------------------------------------\n" +
	"Errors in Microcode (ucode) File\n" +
	"---------------------------------------------\n" +
	ERROR_MESSAGES;
	/*if (!ERROR_DEFAULT_MESSAGE.equals("")) {
		temp += "Line ?: Syntax Error:" + ERROR_DEFAULT_MESSAGE + "\n";
	}*/
	temp += "---------------------------------------------\n" +
	ERROR_MESSAGE_TOTAL + " errors.  \n" +
	"---------------------------------------------\n";
	return temp;
}


public void ustore() {
	ControlWord.printHead();
	for (int i=0; i<ucodememory.size(); i++) {
		if (i % 5 == 0 && i != 0) System.out.println("");
		((ControlWord)ucodememory.get(i)).print();
	}
}

/* **********************************************
* Private Data
********************************************** */

	int ControlLine[] = new int[39];
	boolean ControlLine_Set[] = new boolean[ControlLine.length];
	boolean Branch_Set = false;
	int ERROR_MESSAGE_TOTAL = 0;
	String ERROR_MESSAGES = "";
	String ERROR_DEFAULT_MESSAGE = "";
	ControlWord cw = new ControlWord();
	Vector ucodememory = new Vector();

/* **********************************************
* Private Functions - Called By FLEX Code
********************************************** */

private void set(int index, int value)
{
	if (ControlLine_Set[index]) {
		addError(ControlLine_Name[index] +
		" already defined on this line.");
	} else {
		cw.set(index,value);
		ControlLine_Set[index] = true;
	}
}

private void setSEMICOLON() {
	cw.setAddress(ucodememory.size());
	cw.setLineNumber(yyline+1);
	ucodememory.add(cw);
	cw = new ControlWord();
	for (int i=0; i<ControlLine_Set.length; i++) {
		ControlLine_Set[i] = false;
	}
	Branch_Set = false;
}

private String getLabel(int i) {
	String temp = yytext();
	temp.replaceAll("  "," ");
	String temp2[] = temp.split(" ");
	if (i<temp2.length) {
		return temp2[i];
	} else {
		addError("Goto has no target label.");
		return "n/a";
	}
}

private void setERROR() {
	addError("Syntax Error: " + yytext());
	return;
}

private void setBREAK() {
	return;
}

private void setNOTHING() {
	return;
}

private void addDefaultError() {
	ERROR_DEFAULT_MESSAGE += yytext();
	return;
}

private void setLABEL() {
	if (ControlLine_Set[LABEL]) {
		addError("A label was already defined on this line.");
	} else {
		ControlLine_Set[LABEL] = true;
		String label = yytext();
		label = label.replaceAll(":","");
		cw.setLabel(label);
	}
}

private void setGOTO_OPCODE() {
	if (Branch_Set) {
		Branch_Set = true;
		addError("GOTO already defined on this line.");
	} else {
		//addError("GOTO_OPCODE on this line.");
		cw.set(ControlWord.INDEX_SEL,1);
	}
}

private void setGOTO_LABEL() {
	if (Branch_Set) {
		addError("GOTO already defined on this line.");
	} else {
		//addError("GOTO_LABEL on this line.");
		Branch_Set = true;
		String label = getLabel(1);
		cw.setTrueLabel(label);
		cw.setFalseLabel(label);
	}
}

private void setIF_THEN(int i) {
	if (Branch_Set) {
		addError("GOTO already defined on this line.");
	} else {
		//addError("IF_THEN on this line.");
		Branch_Set = true;
		cw.setTrueLabel(getLabel(4));
		cw.set(ControlWord.COND,i);
	}
}

private void setIF_THEN_ELSE(int i) {
	if (Branch_Set) {
		addError("GOTO already defined on this line.");
	} else {
		//addError("IF_THEN_ELSE on this line.");
		Branch_Set = true;
		cw.setTrueLabel(getLabel(4));
		cw.setFalseLabel(getLabel(7));
		cw.set(ControlWord.COND,i);
	}
}

private void addError(String m) {
	ERROR_MESSAGE_TOTAL++;
	ERROR_MESSAGES += ("    Line " + (yyline+1) +
	": " + m + "\n");
}
private void addError(int l,String m) {
	ERROR_MESSAGE_TOTAL++;
	ERROR_MESSAGES += ("    Line " + l +
	": " + m + "\n");
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  UcodeParser(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  UcodeParser(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[20424];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /**
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead,
                       yy_buffer, 0,
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead,
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_r = false;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof)
            yy_peek = false;
          else
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos =
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state;
            yy_markedPos_l = yy_currentPos_l;
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 71:
          { set(C_IN, 1); }
        case 511: break;
        case 423:
          { setIF_THEN(1); }
        case 512: break;
        case 417:
          { setIF_THEN(3); }
        case 513: break;
        case 409:
          { setIF_THEN(0); }
        case 514: break;
        case 388:
          { setIF_THEN(2); }
        case 515: break;
        case 2:
          { setNOTHING(); }
        case 516: break;
        case 15:
          { setNOTHING(); }
        case 517: break;
        case 171:
          { set(A_SEL, 3); }
        case 518: break;
        case 170:
          { set(A_SEL, 2); }
        case 519: break;
        case 169:
          { set(A_SEL, 1); }
        case 520: break;
        case 168:
          { set(A_SEL, 0); }
        case 521: break;
        case 39:
          { setBREAK(); }
        case 522: break;
        case 172:
          { set(A_SEL, 4); }
        case 523: break;
        case 173:
          { set(A_SEL, 5); }
        case 524: break;
        case 174:
          { set(A_SEL, 6); }
        case 525: break;
        case 175:
          { set(A_SEL, 7); }
        case 526: break;
        case 177:
          { set(B_SEL, 0); }
        case 527: break;
        case 178:
          { set(B_SEL, 1); }
        case 528: break;
        case 179:
          { set(B_SEL, 2); }
        case 529: break;
        case 180:
          { set(B_SEL, 3); }
        case 530: break;
        case 181:
          { set(B_SEL, 4); }
        case 531: break;
        case 182:
          { set(B_SEL, 5); }
        case 532: break;
        case 183:
          { set(B_SEL, 6); }
        case 533: break;
        case 184:
          { set(B_SEL, 7); }
        case 534: break;
        case 13:
          { setSEMICOLON(); }
        case 535: break;
        case 17:
          { setLABEL(); }
        case 536: break;
        case 72:
          { set(READ, 1); }
        case 537: break;
        case 290:
          { set(RESULT_SEL, 3); }
        case 538: break;
        case 289:
          { set(RESULT_SEL, 2); }
        case 539: break;
        case 288:
          { set(RESULT_SEL, 1); }
        case 540: break;
        case 286:
          { set(RESULT_SEL, 0); }
        case 541: break;
        case 111:
          { set(WRITE, 1); }
        case 542: break;
        case 246:
          { set(MAR_SEL, 1); }
        case 543: break;
        case 245:
          { set(MAR_SEL, 0); }
        case 544: break;
        case 242:
          { set(MDR_SEL, 2); }
        case 545: break;
        case 241:
          { set(MDR_SEL, 1); }
        case 546: break;
        case 240:
          { set(MDR_SEL, 0); }
        case 547: break;
        case 235:
          { set(ALU_SEL, 7); }
        case 548: break;
        case 234:
          { set(ALU_SEL, 6); }
        case 549: break;
        case 233:
        case 280:
          { set(ALU_SEL, 5); }
        case 550: break;
        case 232:
        case 279:
          { set(ALU_SEL, 4); }
        case 551: break;
        case 231:
          { set(ALU_SEL, 3); }
        case 552: break;
        case 230:
          { set(ALU_SEL, 2); }
        case 553: break;
        case 229:
          { set(ALU_SEL, 1); }
        case 554: break;
        case 228:
          { set(ALU_SEL, 0); }
        case 555: break;
        case 220:
          { set(IR1_SEL, 1); }
        case 556: break;
        case 219:
          { set(IR1_SEL, 0); }
        case 557: break;
        case 216:
          { set(IR0_SEL, 1); }
        case 558: break;
        case 215:
          { set(IR0_SEL, 0); }
        case 559: break;
        case 136:
          { set(RK_SEL, 1); }
        case 560: break;
        case 135:
          { set(RJ_SEL, 1); }
        case 561: break;
        case 127:
          { set(RI_SEL, 1); }
        case 562: break;
        case 197:
          { set(R7_WRITE, 1); }
        case 563: break;
        case 196:
          { set(R6_WRITE, 1); }
        case 564: break;
        case 1:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
          { setERROR(); }
        case 565: break;
        case 190:
          { set(R0_WRITE, 1); }
        case 566: break;
        case 191:
          { set(R1_WRITE, 1); }
        case 567: break;
        case 192:
          { set(R2_WRITE, 1); }
        case 568: break;
        case 193:
          { set(R3_WRITE, 1); }
        case 569: break;
        case 194:
          { set(R4_WRITE, 1); }
        case 570: break;
        case 195:
          { set(R5_WRITE, 1); }
        case 571: break;
        case 390:
          { setGOTO_OPCODE(); }
        case 572: break;
        case 503:
          { setIF_THEN_ELSE(1); }
        case 573: break;
        case 500:
          { setIF_THEN_ELSE(3); }
        case 574: break;
        case 495:
          { setIF_THEN_ELSE(0); }
        case 575: break;
        case 482:
          { setIF_THEN_ELSE(2); }
        case 576: break;
        case 150:
        case 151:
        case 187:
        case 212:
        case 249:
        case 268:
        case 285:
        case 316:
          { setGOTO_LABEL(); }
        case 577: break;
        default:
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          }
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
